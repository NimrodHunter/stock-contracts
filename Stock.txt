/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
  address public owner;


  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);


  /**
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
   * account.
   */
  function Ownable() public {
    owner = msg.sender;
  }

  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }

}

// File: openzeppelin-solidity/contracts/math/SafeMath.sol

/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {

  /**
  * @dev Multiplies two numbers, throws on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
    if (a == 0) {
      return 0;
    }
    c = a * b;
    assert(c / a == b);
    return c;
  }

  /**
  * @dev Integer division of two numbers, truncating the quotient.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    // uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return a / b;
  }

  /**
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  /**
  * @dev Adds two numbers, throws on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
    c = a + b;
    assert(c >= a);
    return c;
  }
}

// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol

/**
 * @title ERC20Basic
 * @dev Simpler version of ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/179
 */
contract ERC20Basic {
  function totalSupply() public view returns (uint256);
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
}

// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol

/**
 * @title Basic token
 * @dev Basic version of StandardToken, with no allowances.
 */
contract BasicToken is ERC20Basic {
  using SafeMath for uint256;

  mapping(address => uint256) balances;

  uint256 totalSupply_;

  /**
  * @dev total number of tokens in existence
  */
  function totalSupply() public view returns (uint256) {
    return totalSupply_;
  }

  /**
  * @dev transfer token for a specified address
  * @param _to The address to transfer to.
  * @param _value The amount to be transferred.
  */
  function transfer(address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[msg.sender]);

    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    emit Transfer(msg.sender, _to, _value);
    return true;
  }

  /**
  * @dev Gets the balance of the specified address.
  * @param _owner The address to query the the balance of.
  * @return An uint256 representing the amount owned by the passed address.
  */
  function balanceOf(address _owner) public view returns (uint256) {
    return balances[_owner];
  }

}

// File: contracts/BurnableToken.sol

/**
 * @title Burnable Token
 * @dev Token that can be irreversibly burned (destroyed).
 */
contract BurnableToken is Ownable, BasicToken {
    event Burn(address indexed burner, uint256 value);

    function burn(address _who, uint256 _value) public onlyOwner returns (bool) {
        require(_value <= balances[_who], "doesn't have enough balance");
        // no need to require value <= totalSupply, since that would imply the
        // sender's balance is greater than the totalSupply, which *should* be an assertion failure

        balances[_who] = balances[_who].sub(_value);
        totalSupply_ = totalSupply_.sub(_value);
        emit Burn(_who, _value);
        emit Transfer(_who, address(0), _value);
        return true;
    }
}

// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol

/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20 is ERC20Basic {
  function allowance(address owner, address spender) public view returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}

// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol

/**
 * @title Standard ERC20 token
 *
 * @dev Implementation of the basic standard token.
 * @dev https://github.com/ethereum/EIPs/issues/20
 * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
 */
contract StandardToken is ERC20, BasicToken {

  mapping (address => mapping (address => uint256)) internal allowed;


  /**
   * @dev Transfer tokens from one address to another
   * @param _from address The address which you want to send tokens from
   * @param _to address The address which you want to transfer to
   * @param _value uint256 the amount of tokens to be transferred
   */
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[_from]);
    require(_value <= allowed[_from][msg.sender]);

    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    emit Transfer(_from, _to, _value);
    return true;
  }

  /**
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
   *
   * Beware that changing an allowance with this method brings the risk that someone may use both the old
   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   * @param _spender The address which will spend the funds.
   * @param _value The amount of tokens to be spent.
   */
  function approve(address _spender, uint256 _value) public returns (bool) {
    allowed[msg.sender][_spender] = _value;
    emit Approval(msg.sender, _spender, _value);
    return true;
  }

  /**
   * @dev Function to check the amount of tokens that an owner allowed to a spender.
   * @param _owner address The address which owns the funds.
   * @param _spender address The address which will spend the funds.
   * @return A uint256 specifying the amount of tokens still available for the spender.
   */
  function allowance(address _owner, address _spender) public view returns (uint256) {
    return allowed[_owner][_spender];
  }

  /**
   * @dev Increase the amount of tokens that an owner allowed to a spender.
   *
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   * @param _spender The address which will spend the funds.
   * @param _addedValue The amount of tokens to increase the allowance by.
   */
  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

  /**
   * @dev Decrease the amount of tokens that an owner allowed to a spender.
   *
   * approve should be called when allowed[_spender] == 0. To decrement
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   * @param _spender The address which will spend the funds.
   * @param _subtractedValue The amount of tokens to decrease the allowance by.
   */
  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
    uint oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

}

// File: contracts/MintableToken.sol

/**
 * @title Mintable token
 * @dev Simple ERC20 Token example, with mintable token creation
 * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120
 * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol
 */
contract MintableToken is Ownable, StandardToken {

    event Mint(address indexed to, uint256 amount);

    /**
    * @dev Function to mint tokens
    * @param _to The address that will receive the minted tokens.
    * @param _amount The amount of tokens to mint.
    * @return A boolean that indicates if the operation was successful.
    */
    
    function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {
        totalSupply_ = totalSupply_.add(_amount);
        balances[_to] = balances[_to].add(_amount);
        emit Mint(_to, _amount);
        emit Transfer(address(0), _to, _amount);
        return true;
    }

}

// File: @acatalan/erc223-20-contracts/contracts/ERC223Basic.sol

/**
 * @title ERC223 standard token interface.
 */

contract ERC223Basic is ERC20 {
    /**
      * @dev triggered when transfer is successfully called.
      *
      * @param _from  Sender address.
      * @param _to    Receiver address.
      * @param _value Amount of tokens that will be transferred.
      * @param _data  Transaction metadata.
      */
    event Transfer(address indexed _from, address indexed _to, uint256 indexed _value, bytes _data);

    /**
      * @dev Transfer the specified amount of tokens to the specified address.
      *      Now with a new parameter _data.
      *
      * @param _to    Receiver address.
      * @param _value Amount of tokens that will be transferred.
      * @param _data  Transaction metadata.
      */
    function transfer(address _to, uint256 _value, bytes _data) public returns (bool);
}

// File: @acatalan/erc223-20-contracts/contracts/ERC223ReceivingContract.sol

/// @title Contract that supports the receival of ERC223 tokens.
contract ERC223ReceivingContract {
        /// @dev Standard ERC223 function that will handle incoming token transfers.
        /// @param _from  Token sender address.
        /// @param _value Amount of tokens.
        /// @param _data  Transaction metadata.
        function tokenFallback(address _from, uint256 _value, bytes _data) public;
}

// File: @acatalan/erc223-20-contracts/contracts/ERC223BasicToken.sol

/**
 * @title ERC223 standard token implementation.
 */
contract ERC223BasicToken is ERC223Basic, StandardToken {
    function() public {
        //if ether is sent to this address, send it back.
        revert();
    }
    
    /**
     * @dev Transfer the specified amount of tokens to the specified address.
     *      Invokes the `tokenFallback` function if the recipient is a contract.
     *      The token transfer fails if the recipient is a contract
     *      but does not implement the `tokenFallback` function
     *      or the fallback function to receive funds.
     *
     * @param _to    Receiver address.
     * @param _value Amount of tokens that will be transferred.
     * @param _data  Transaction metadata.
     */
    function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {
        // Standard function transfer similar to ERC20 transfer with no _data .
        // Added due to backwards compatibility reasons .
        uint codeLength;
        assembly {
            // Retrieve the size of the code on target address, this needs assembly .
            codeLength := extcodesize(_to)
        }
        require(super.transfer(_to, _value), "ERC20 transafer fail");
        if(codeLength>0) {
            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);
            receiver.tokenFallback(msg.sender, _value, _data);
        }
        emit Transfer(msg.sender, _to, _value, _data);
        return true;
    }

    /**
     * @dev Transfer the specified amount of tokens to the specified address.
     *      Invokes the `tokenFallback` function if the recipient is a contract.
     *      The token transfer fails if the recipient is a contract
     *      but does not implement the `tokenFallback` function
     *      or the fallback function to receive funds.
     *
     * @param _to    Receiver address.
     * @param _value Amount of tokens that will be transferred.
     */
    function transfer(address _to, uint256 _value) public returns (bool) {
        bytes memory empty;
        require(transfer(_to, _value, empty), "ERC223 transfer fail");
        return true;
    }
}

// File: contracts/StockToken.sol

/// @title StockToken that uses MintableToken, BurnableToken and ERC223BasicToken.
contract StockToken is Ownable, MintableToken, BurnableToken, ERC223BasicToken {
    uint256 public start;
    uint256 public revenueFrame;

    function begun(uint256 _revenueFrame) public onlyOwner {
        start = block.timestamp;
        revenueFrame = _revenueFrame;
    }

    function burn(address _who, uint256 _value) public onlyOwner returns (bool) {
        require(block.timestamp > start.add(revenueFrame), "it isn't the right period");
        super.burn(_who, _value);
        return true;
    }
}

// File: contracts/Stock.sol

contract Stock is Ownable, ERC223ReceivingContract {
    using SafeMath for uint256;    
    
    mapping(uint256 => address) public tokens; //current period -> token
    mapping(address => bool) public isToken;
    mapping(address => address) public nextToken;
    uint256 public numberOfPeriods = 1; // number of periods
    mapping(uint256 => uint256) public periodNumber;
    mapping(address => address) public currentTokenOf; //user -> token -> period -> balance
    mapping(address => uint256) public periodByToken; 
    mapping(uint256 => uint256) public balanceByPeriod;

    function currentToken(address user) public view returns(address) {
        return currentTokenOf[user];
    }

    function getPeriodByToken(address stockToken) public view returns(uint256) {
        return periodByToken[stockToken];
    }

    function poolBalance(uint256 period) public view returns(uint256) {
        return balanceByPeriod[period];
    }

    function getPeriodNumber(uint256 period) public view returns(uint256) {
        return periodNumber[period];
    }
  
    uint256 public currentPeriod;
    uint256 public revenueFrame;
    uint256 public sharesNumber;
    address fiatToken;

    constructor(address _fiatToken, uint256 _revenueFrame) public {
        fiatToken = _fiatToken;
        revenueFrame = _revenueFrame;
    }

    function begun(address _stock) public onlyOwner {
        
        sharesNumber = StockToken(_stock).totalSupply();
        isToken[_stock] = true;
        currentPeriod = block.timestamp;
        periodNumber[currentPeriod] = numberOfPeriods;
        tokens[currentPeriod] = _stock;
        periodByToken[_stock] = currentPeriod;
        address nextStock = new StockToken();
        nextToken[_stock] = nextStock;
        isToken[nextStock] = true;
        StockToken(_stock).begun(revenueFrame);
    }

    function tokenFallback(address _from, uint256 _value, bytes _data) public updatePeriod {
        require(msg.sender == fiatToken || isToken[msg.sender]);
        if (msg.sender == fiatToken) {
            deposit(_value);
        } else {
            claimRevenue(_from, _value, msg.sender);
            }
    }

    function claimRevenue(address _from, uint256 _amount, address _stockToken) public updatePeriod {
        if (msg.sender != _stockToken) {
            require(StockToken(_stockToken).transferFrom(_from, address(this), _amount), "transfer from fail");
        }
        require(StockToken(_stockToken).burn(address(this), _amount), "burn error");
        require(ERC223BasicToken(fiatToken).transfer(_from, balanceByPeriod[periodByToken[_stockToken]].mul(_amount).div(sharesNumber)), "transfer error");
        require(StockToken(nextToken[_stockToken]).mint(_from, _amount), "mint error");
        if (StockToken(_stockToken).totalSupply() == 0 && balanceByPeriod[periodByToken[_stockToken]] > 0) {
            balanceByPeriod[periodByToken[nextToken[_stockToken]]] = balanceByPeriod[periodByToken[nextToken[_stockToken]]].add(balanceByPeriod[periodByToken[_stockToken]]);
            balanceByPeriod[periodByToken[_stockToken]] = 0;
        }

    }

    function deposit(uint256 _amount) public updatePeriod {
        require(msg.sender == owner || msg.sender == fiatToken, "doesn't have permissions");
        balanceByPeriod[currentPeriod] = balanceByPeriod[currentPeriod].add(_amount);
        if (msg.sender == owner) {
            require(ERC223BasicToken(fiatToken).transferFrom(owner, address(this), _amount), "transfer from fail");
        }
    }

    function withdraw(uint256 _amount) public onlyOwner updatePeriod {
        require(_amount <= balanceByPeriod[currentPeriod], "doesn't have enough balance");
        balanceByPeriod[currentPeriod] = balanceByPeriod[currentPeriod].sub(_amount);
        require(ERC223BasicToken(fiatToken).transfer(msg.sender, _amount), "fiat transfer error");
    }
        
    function changePeriod() public {
        if (block.timestamp > currentPeriod.add(revenueFrame)) {
            address newCurrentToken = nextToken[tokens[currentPeriod]];
            address nextStock = new StockToken();
            nextToken[newCurrentToken] = nextStock;
            isToken[nextStock] = true;
            currentPeriod = block.timestamp;
            tokens[currentPeriod] = newCurrentToken;
            numberOfPeriods += 1;
            periodByToken[nextStock] = currentPeriod;
            periodNumber[currentPeriod] = numberOfPeriods;
            StockToken(newCurrentToken).begun(revenueFrame);
        }   
    }

    modifier updatePeriod() {
        changePeriod();
        _;
    }
 
}
